version: '3.9'
services:
  postgres:
    image: postgres:16-alpine
    container_name: etl_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-etl_mult}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-etl_mult}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: etl_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  etl_job:
    build: .
    container_name: etl_job
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # ⚡ LIMITES DE MEMÓRIA - Ajuste conforme necessário
    mem_limit: 3g
    memswap_limit: 3g  # Desabilita swap (memswap = mem_limit)
    environment:
      NODE_ENV: production
      # ⚡ Configurações de memória Node.js
      NODE_OPTIONS: "--expose-gc --max-old-space-size=2048"
      # API de processamento DBC -> PostgreSQL
      CONVERTER_API_URL: ${CONVERTER_API_URL:-http://host.docker.internal:5000/processar}
      # Axios timeout: 30 minutos (processamento DBC é muito lento)
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-1800000}
      HTTP_MAX_REDIRECTS: 5
      # Bull/Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # DB para TypeORM (usa hostname interno do Compose)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-etl_mult}
      # Parâmetros ETL
      ETL_MODE: ${ETL_MODE:-download-mensal}
      ETL_TIPO_ARQUIVO: ${ETL_TIPO_ARQUIVO:-PA}
      ETL_MODALIDADE: ${ETL_MODALIDADE:-1}
      ETL_FONTE: ${ETL_FONTE:-SIASUS}
      ETL_UF: ${ETL_UF:-PE}
    command: ["node", "--expose-gc", "--max-old-space-size=2048", "dist/scripts/run-etl.js"]

volumes:
  postgres_data:
  redis_data:
